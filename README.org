#+TITLE: CHATIDEA
#+AUTHOR: Andrea Esposito
#+SETUPFILE: https://fniessen.github.io/org-html-themes/org/theme-readtheorg.setup

CHATIDEA is a framework that allows the generation of a chatbot starting from a database's schema.

This file holds the main documentation for the implementation of the CHATIDEA framework. Please note that this is an Org Mode file: you can either view it as a simple text file (just like MarkDown files, although the syntax is a little different), or you can open it in an editor that supports Org Mode (e.g., Emacs) to be able to run the code cells using =C-c C-c=.

* Requirements

This version of CHATIDEA requires the following to be installed in your machine (please refer to the official documentations for instructions on how to install them).

- [[https://www.python.org/downloads][Python 3.9 (with PIP)]]
- [[https://nodejs.org/][Node.js (with NPM)]]
- [[https://pipenv.pypa.io][Pipenv]]
- [[https://www.docker.com][Docker and Docker Compose]]
- [[https://github.com/mkleehammer/pyodbc/wiki/Install][ODBC drivers]]

- Prima di lanciare il chatbot ricordare di avere sul proprio sistema attivo MySql e di aver installato il database di riferimento del chatbot (**deib** nel caso corrente il cui dump è disponibile nella cartella *Chatidea\resources\db*). Seguire gli step della configurazione per collegare il chatbot al database
- Per lanciare la chatbot dalla cartella Chatidea eseguire il comando
  ***pipenv run python run.py***
- Dal browser ora il chabot è raggiungibile all’indirizzo ***localhost:5080***

Install all Python dependencies in a virtual environment using the following command:

#+BEGIN_SRC shell :results output silent
PIPENV_VENV_IN_PROJECT=1 pipenv install --dev
#+END_SRC

* Execute the Pipeline

The NLU pipeline is fully contained in the directory =nlu-model=. Note that this README files automatically adjusts the current working directory where needed using OrgMode's =:dir= property in source blocks. If you are not using Emacs OrgMode (or other supported editors/viewers) be sure to change the directory using the following command before executing the pipeline.

#+BEGIN_SRC shell
cd nlu-model
#+END_SRC

** Install Pipeline Dependencies

If you want to re-execute the entire NLU model training and testing pipeline, you'll need additional dependencies. To install them, execute the following commands.

#+BEGIN_SRC shell :results output silent :dir nlu-model
npm install --dev
#+END_SRC

** Generate Data and Train the Model

#+BEGIN_SRC shell :results output silent :dir nlu-model
dvc repro
#+END_SRC

* Start the Rasa Server

#+BEGIN_SRC shell :results output silent :dir nlu-model
rasa run --enable-api
#+END_SRC

* Deploying Information

The project is configured to be deployed using containerization. More precisely, one container for each micro-service is expected. Thus, this repository holds configuration files for Docker, using Dockerfiles and docker-compose (used to manage the communication between the micro-services). To build the deployment containers, run the following:

#+BEGIN_SRC shell :results output silent
docker-compose build
#+END_SRC

To execute the chatbot, run the following command (remove the =-d= at the end to avoid executing as a daemon).

#+BEGIN_SRC shell :results output silent
docker-compose up -d
#+END_SRC

To shut-down the services, you can either use =C-c= (if you are not running in daemon mode) or you can run the following command:

#+BEGIN_SRC shell :results output silent
docker-compose down
#+END_SRC

** Testing the Deployment on Apple Silicon and Other ARM Processors

At the moment, the project is based on Rasa. Sadly, the official Docker image of Rasa does not support the ARM architecture. As a workaround, until an official version is released, an unofficial image can be downloaded from DockerHub. To use it, in the file =nlu-model/Dockerfile= replace the =FROM= image by changing =rasa/rasa= to =khalosa/rasa-aarch64:3.5.2=. The following command does that automatically (note: =sed='s inplace option =-i= is not used to ensure POSIX compatibility, as macOS system do not ship by default with the GNU version of =sed=).

#+BEGIN_SRC shell :results output none
TEMP_FILE=$(mktemp) && \
    sed '1s;rasa/rasa;khalosa/rasa-aarch64:3.5.2;' nlu-model/Dockerfile > $TEMP_FILE && \
    mv $TEMP_FILE nlu-model/Dockerfile
#+END_SRC

* Known Issues and Future Actions
** TODO Separate NLU model's environment from the main app's environment
